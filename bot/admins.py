import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3
from datetime import datetime
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="7614037945:AAFrWrjShd62i_QDfqN-5YnfKNcthUXkb4w")  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –¢–û–ö–ï–ù
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('referrals.db', check_same_thread=False)
cursor = conn.cursor()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞
class AnswerState(StatesGroup):
    waiting_for_answer = State()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_ID = 622077354 # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® ID
last_checked_id = 0  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î"""
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            question TEXT NOT NULL,
            admin_answer TEXT DEFAULT NULL,
            is_answered BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()


check_database()




async def check_new_questions():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    global last_checked_id  # –ü–µ—Ä–µ–Ω–µ—Å–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å—é–¥–∞
    while True:
        await asyncio.sleep(10)
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ last_checked_id
            cursor.execute(
                "SELECT COUNT(id) FROM questions WHERE id > ? AND is_answered = FALSE",
                (last_checked_id,)
            )
            new_count = cursor.fetchone()[0]

            if new_count > 0:
                await notify_admin(new_count)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
                cursor.execute("SELECT MAX(id) FROM questions")
                last_checked_id = cursor.fetchone()[0] or 0

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")


async def on_startup(dp):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    global last_checked_id  # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–¥–µ—Å—å
    cursor.execute("SELECT MAX(id) FROM questions")
    last_checked_id = cursor.fetchone()[0] or 0
    asyncio.create_task(check_new_questions())


async def notify_admin(new_count: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        await bot.send_message(ADMIN_ID, f"üîî –ù–æ–≤—ã—Ö –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {new_count}\n –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ - /start")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    cursor.execute("SELECT id, question FROM questions WHERE is_answered = FALSE")
    questions = cursor.fetchall()

    if not questions:
        await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        return

    keyboard = types.InlineKeyboardMarkup()
    for q_id, q_text in questions:
        button_text = f"‚ùì {q_text[:30]}{'...' if len(q_text) > 30 else ''}"
        keyboard.add(types.InlineKeyboardButton(
            text=button_text,
            callback_data=f"question_{q_id}"
        ))

    await message.answer("üìù –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('question_'))
async def show_question_details(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –≤–æ–ø—Ä–æ—Å–∞"""
    q_id = int(callback_query.data.split('_')[1])

    cursor.execute('''
        SELECT user_id, question, created_at 
        FROM questions 
        WHERE id = ?''', (q_id,))

    result = cursor.fetchone()
    if not result:
        await bot.answer_callback_query(callback_query.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user_id, question, created_at = result
    formatted_time = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")

    text = (
        f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üïí –í—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–∞: {formatted_time}\n"
        f"üìù –í–æ–ø—Ä–æ—Å:\n{question}"
    )

    await bot.send_message(
        chat_id=ADMIN_ID,
        text=text,
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton(
                text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
                callback_data=f"answer_{q_id}"
            )
        )
    )
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data.startswith('answer_'))
async def start_answer(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–≤–µ—Ç–∞"""
    q_id = int(callback_query.data.split('_')[1])
    async with state.proxy() as data:
        data['question_id'] = q_id

    await AnswerState.waiting_for_answer.set()
    await bot.send_message(ADMIN_ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")


@dp.message_handler(state=AnswerState.waiting_for_answer)
async def save_answer(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î"""
    answer = message.text
    async with state.proxy() as data:
        q_id = data['question_id']

    cursor.execute('''
        UPDATE questions 
        SET admin_answer = ?, is_answered = TRUE 
        WHERE id = ?
    ''', (answer, q_id))
    conn.commit()

    await message.answer("‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await state.finish()
    await send_welcome(message)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_user_question(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.from_user.id == ADMIN_ID:
        return

    cursor.execute('''
        INSERT INTO questions (user_id, question)
        VALUES (?, ?)
    ''', (message.from_user.id, message.text))
    conn.commit()

    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await notify_admin(1)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)