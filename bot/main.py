import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from database import create_db, add_user, update_user_balance, get_user_by_id, add_post, get_chat_history

API_TOKEN = '8165391157:AAHJr_b-FRzZUwM5S_FTM4WLqXUqThYij_k'
ADMIN_ID = 6850731097  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


async def on_startup(dp):
    await create_db()  # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    referral_id = message.get_args()

    if await add_user(user_id, username, referral_id):
        if referral_id:
            referrer = await get_user_by_id(referral_id)
            if referrer:
                await update_user_balance(referral_id, 5)
                await bot.send_message(referral_id, f"üéâ {username} —Å—Ç–∞–ª –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 5 –±–∞–ª–ª–æ–≤.")

        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post"),
            InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", callback_data="reply_questions")
        )
        await message.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")


@dp.callback_query_handler(text="add_post")
async def add_post_command(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/task <task>\n/description <description>\n/link <link>\n/bonus <bonus>")


@dp.callback_query_handler(text="reply_questions")
async def reply_questions(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = callback_query.from_user.id
    questions = await get_chat_history(user_id)

    if not questions:
        await bot.send_message(user_id, "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    for question in questions:
        vopros, _ = question
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{vopros}")
        )
        await bot.send_message(user_id, f"–í–æ–ø—Ä–æ—Å: {vopros}", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('reply_'))
async def process_reply(callback_query: types.CallbackQuery):
    question = callback_query.data[6:]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    await bot.answer_callback_query(callback_query.id)

    await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}")
    await dp.current_state(user=callback_query.from_user.id).update_data(current_question=question)
    await dp.current_state(user=callback_query.from_user.id).set_state("waiting_for_reply")


@dp.message_handler(state="waiting_for_reply")
async def handle_reply(message: types.Message):
    data = await dp.current_state(user=message.from_user.id).get_data()
    question = data.get("current_question")

    if question:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_post("–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å", message.text, "", 0)  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await message.reply("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await dp.current_state(user=message.from_user.id).reset_data()
    else:
        await message.reply("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)