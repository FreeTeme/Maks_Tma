import logging
import sqlite3
import asyncio
import pandas as pd
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from urllib.parse import quote
import io
from datetime import datetime
from typing import Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "8071846167:AAH5iIcF8Z_dQ-RrmKEfxYO8mebDZ3T1uTE"
ADMIN_ID = 6850731097
WEB_APP_URL = "https://vladtichonenko.github.io/test_post1/"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


### --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î --- ###

def get_db():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∫—É—Ä—Å–æ—Ä –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("referrals.db")
    return conn, conn.cursor()


def create_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    conn, cursor = get_db()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            referrer_id INTEGER,
            balance INTEGER DEFAULT 100,
            referral_link TEXT,
            mining_end_time INTEGER
        )
    """)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü referral_link, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute("PRAGMA table_info(users)")
    columns = [column[1] for column in cursor.fetchall()]
    if 'referral_link' not in columns:
        cursor.execute("ALTER TABLE users ADD COLUMN referral_link TEXT")

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            description TEXT,
            link TEXT,
            bonus INTEGER
        )
    """)

    conn.commit()
    conn.close()


def add_post(title, description, link, bonus):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn, cursor = get_db()
    cursor.execute(
        "INSERT INTO posts (title, description, link, bonus) VALUES (?, ?, ?, ?)",
        (title, description, link, bonus)
    )
    conn.commit()
    conn.close()


def get_posts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"""
    conn, cursor = get_db()
    cursor.execute("SELECT id, title, description, link, bonus FROM posts")
    posts = cursor.fetchall()
    conn.close()
    return posts


def delete_post(post_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn, cursor = get_db()
    cursor.execute("DELETE FROM posts WHERE id = ?", (post_id,))
    conn.commit()
    conn.close()


def add_user(user_id, username, referrer_id=None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn, cursor = get_db()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))

    if cursor.fetchone() is None:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_link = f"https://t.me/HistoBit_bot?start={user_id}"

        cursor.execute("""
            INSERT INTO users 
            (user_id, username, referrer_id, balance, referral_link) 
            VALUES (?, ?, ?, 100, ?)
        """, (user_id, username, referrer_id, referral_link))

        conn.commit()

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        if referrer_id:
            update_balance(referrer_id, 3)
            notify_referrer(referrer_id, username, 3)

            # –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            cursor.execute("SELECT referrer_id FROM users WHERE user_id = ?", (referrer_id,))
            second_level_ref = cursor.fetchone()
            if second_level_ref and second_level_ref[0]:
                update_balance(second_level_ref[0], 1)
                notify_referrer(second_level_ref[0], username, 1)

    conn.close()


def update_balance(user_id, points):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn, cursor = get_db()
    cursor.execute(
        "UPDATE users SET balance = balance + ? WHERE user_id = ?",
        (points, user_id)
    )
    conn.commit()
    conn.close()


def get_balance(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn, cursor = get_db()
    cursor.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0


async def notify_referrer(referrer_id, new_username, points):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    await bot.send_message(
        referrer_id,
        f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{new_username} –ø—Ä–∏–Ω–µ—Å –≤–∞–º {points} –±–∞–ª–ª–æ–≤!"
    )


def get_referrals(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    conn, cursor = get_db()
    cursor.execute("SELECT username FROM users WHERE referrer_id = ?", (user_id,))
    referrals = cursor.fetchall()
    conn.close()
    return [ref[0] for ref in referrals]


def get_all_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏"""
    conn, cursor = get_db()

    cursor.execute("SELECT user_id, username, balance FROM users")
    users = cursor.fetchall()

    users_data = []
    for user_id, username, balance in users:
        cursor.execute("SELECT username FROM users WHERE referrer_id = ?", (user_id,))
        referrals = cursor.fetchall()
        referrals_list = [ref[0] for ref in referrals] if referrals else []
        users_data.append({
            "user_id": user_id,
            "username": username or f"id{user_id}",
            "balance": balance,
            "referrals": referrals_list
        })

    conn.close()
    return users_data


### --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ --- ###

@dp.message(CommandStart())
async def send_welcome(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    referrer_id = None

    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
            if referrer_id == user_id:
                referrer_id = None
        except ValueError:
            referrer_id = None

    add_user(user_id, username, referrer_id)
    balance = get_balance(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –¥–∞–Ω–Ω—ã–º–∏
    posts = get_posts()
    posts_param = "|".join([f"{p[1]}~{p[2]}~{p[3]}~{p[4]}" for p in posts])
    posts_param = quote(posts_param)
    url_with_data = f"{WEB_APP_URL}?user_id={user_id}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ HistoBit", url=url_with_data)

    referral_link = f"https://t.me/HistoBit_bot?start={user_id}"
    message_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"üèÜ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} –±–∞–ª–ª–æ–≤\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
    )

    await message.answer(message_text, reply_markup=builder.as_markup())

@dp.message(Command('points'))
async def show_points(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {get_balance(message.from_user.id)} –±–∞–ª–ª–æ–≤")


@dp.message(Command('ref'))
async def show_referrals(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    referrals = get_referrals(message.from_user.id)
    if referrals:
        await message.answer("–¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n" + "\n".join([f"@{r}" for r in referrals]))
    else:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")


async def show_all_users(source: Union[Message, CallbackQuery]):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if isinstance(source, CallbackQuery):
        user_id = source.from_user.id
        message = source.message
    else:
        user_id = source.from_user.id
        message = source

    if user_id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    users_data = get_all_users()

    if not users_data:
        await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = "üìä <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for user in users_data:
        referrals_text = ", ".join([f"@{ref}" for ref in user['referrals']]) if user['referrals'] else "–Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
        text += (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{user['username']} (ID: {user['user_id']})\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']} –±–∞–ª–ª–æ–≤\n"
            f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b> {referrals_text}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )

    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    df = pd.DataFrame([{
        'ID': user['user_id'],
        'Username': user['username'],
        'Balance': user['balance'],
        'Referrals': ", ".join(user['referrals']) if user['referrals'] else "None",
        'Referrals Count': len(user['referrals'])
    } for user in users_data])

    excel_buffer = io.BytesIO()
    with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='Users')
    excel_buffer.seek(0)

    await message.answer(text, parse_mode='HTML')
    await message.answer_document(
        types.BufferedInputFile(excel_buffer.read(), filename='users_list.xlsx'),
        caption="üìã Excel —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )


@dp.message(Command('admin'))
async def admin_panel(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post")
    builder.button(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users")
    builder.button(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤", callback_data="view_posts")
    builder.adjust(1)

    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É t.me/histobit_chat_bot", reply_markup=builder.as_markup())


@dp.callback_query(F.data == "add_post")
async def add_post_command(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/task <title>\n"
        "/description <desc>\n"
        "/link <link>\n"
        "/bonus <bonus>"
    )


@dp.callback_query(F.data == "all_users")
async def all_users_callback(callback: CallbackQuery):
    await callback.answer()
    await show_all_users(callback)


@dp.callback_query(F.data == "view_posts")
async def view_posts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    await callback.answer()

    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    posts = get_posts()
    if not posts:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return

    for post_id, title, description, link, bonus in posts:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.button(text="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"delete_post_{post_id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        text = (
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {link or '–ù–µ—Ç —Å—Å—ã–ª–∫–∏'}\n"
            f"üéÅ <b>–ë–æ–Ω—É—Å:</b> {bonus} –±–∞–ª–ª–æ–≤"
        )

        await callback.message.answer(text, parse_mode='HTML', reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith("delete_post_"))
async def delete_post_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await callback.answer()

    if callback.from_user.id != ADMIN_ID:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ callback_data
    post_id = int(callback.data.replace("delete_post_", ""))

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
    delete_post(post_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="add_post")
    builder.button(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="all_users")
    builder.button(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤", callback_data="view_posts")
    builder.adjust(1)

    await callback.message.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: \n\n –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É t.me/histobit_chat_bot",
                                  reply_markup=builder.as_markup())


@dp.message(F.text.startswith("/task"))
async def handle_task(message: Message):
    data = message.text.split('\n')
    title, description, link, bonus = None, None, None, 0

    for line in data:
        if line.startswith("/task"):
            title = line.replace("/task ", "").strip()
        elif line.startswith("/description"):
            description = line.replace("/description ", "").strip()
        elif line.startswith("/link"):
            link = line.replace("/link ", "").strip()
        elif line.startswith("/bonus"):
            try:
                bonus = int(line.replace("/bonus ", "").strip())
            except ValueError:
                bonus = 0

    if not title or not description:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ!")
        return

    add_post(title, description, link, bonus)
    await message.answer("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")


async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    create_db()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")


async def main():
    await on_startup()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())