#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
"""
import requests
import json
import time
from datetime import datetime, timedelta

def test_analysis_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    base_url = "http://localhost:5010"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏
    test_candles = [
        {
            "open_time": "2024-01-15T00:00:00Z",
            "close_time": "2024-01-15T23:59:59Z", 
            "open_price": 42000.0,
            "close_price": 42500.0,
            "high": 43000.0,
            "low": 41800.0,
            "volume": 1000000.0
        },
        {
            "open_time": "2024-01-16T00:00:00Z",
            "close_time": "2024-01-16T23:59:59Z",
            "open_price": 42500.0, 
            "close_price": 42000.0,
            "high": 42800.0,
            "low": 41500.0,
            "volume": 1200000.0
        },
        {
            "open_time": "2024-01-17T00:00:00Z",
            "close_time": "2024-01-17T23:59:59Z",
            "open_price": 42000.0,
            "close_price": 43500.0, 
            "high": 44000.0,
            "low": 41800.0,
            "volume": 1500000.0
        }
    ]
    
    payload = {
        "num_candles": 3,
        "candles": test_candles,
        "timeframe": "1d"
    }
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å {len(test_candles)} —Å–≤–µ—á–∞–º–∏")
    
    start_time = time.time()
    
    try:
        response = requests.post(
            f"{base_url}/analyze_pattern",
            json=payload,
            timeout=120  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {data.get('statistics', {}).get('matches_found', 0)}")
            
            if 'performance_stats' in data:
                stats = data['performance_stats']
                print(f"–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {stats.get('median_change', 0)}%")
                print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats.get('success_rate', 0)}%")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            except:
                print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (120 —Å–µ–∫—É–Ω–¥)")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:5010")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_data_bounds():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –¥–∞–Ω–Ω—ã—Ö"""
    base_url = "http://localhost:5010"
    
    print("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º API –≥—Ä–∞–Ω–∏—Ü –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        response = requests.get(f"{base_url}/api/pattern_bounds?timeframe=1d", timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ì—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω—ã!")
            print(f"–ù–∞—á–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: {data.get('start', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"–ö–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö: {data.get('end', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ===\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
    bounds_ok = test_data_bounds()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    analysis_ok = test_analysis_api()
    
    print(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    print(f"–ì—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ OK' if bounds_ok else '‚ùå FAIL'}")
    print(f"–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {'‚úÖ OK' if analysis_ok else '‚ùå FAIL'}")
    
    if bounds_ok and analysis_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
